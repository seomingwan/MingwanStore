
services:
  nginxproxy:
    depends_on:
      - member-api
      - member-client
      - member-mysql
    image: nginx:alpine
    container_name: proxyserver
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot-etc:/etc/letsencrypt
      - ./api-gateway:/usr/share/nginx/html
  
  ####################################################### kafka #######################################################

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka-1:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka-1
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka-1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "topic-test:1:1"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      
  kafka-2:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka-2
    ports:
      - "9093:9093"
    links:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_HOST_NAME: kafka-2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "topic-test:1:1"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      
  kafka-3:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka-3
    ports:
      - "9094:9094"
    links:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_HOST_NAME: kafka-3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "topic-test:1:1"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8989:8989"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  #####################################################################################################################

  #################################################### api gateway ####################################################

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    volumes:
      - ./api-gateway:/usr/share/nginx/html
    links:
      - "member-mysql:mysql-database"

  redis-server:
    image: redis:alpine
    container_name: redis-server
    hostname: mingwan
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    ports:
      - 6379:6379
    command: ["redis-server", "--appendonly", "no", "--maxmemory", "500mb", "--maxmemory-policy", "allkeys-lru"]

  #####################################################################################################################
  
  ###################################################### member #######################################################

  member-api:
    build: ./services/member-service/member-api
    container_name: member-api
    restart: always
    volumes:
      - ./services/member-service/member-api:/usr/share/nginx/html
    links:
      - "member-mysql:mysql-database"

  member-client:
    image: nginx:latest
    container_name: member-client
    restart: always
    volumes:
      - ./services/member-service/member-client/dist:/usr/share/nginx/html/member

  member-client-test:
    build: ./services/member-service/member-client-test-setting
    container_name: member-client-test
    restart: always
    volumes:
      - ./services/member-service/member-client:/usr/share/nginx/html/membertest

  member-mysql:
    image: mysql:5.7
    container_name: member-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MEMBER_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${MEMBER_MYSQL_DATABASE:-}
      MYSQL_USER: ${MEMBER_MYSQL_USER:-}
      MYSQL_PASSWORD: ${MEMBER_MYSQL_PASSWORD:-}
    ports:
      - "4000:3306"
    volumes:
      - ./services/member-service/member-api/member-mysql_data:/var/lib/mysql

  #####################################################################################################################

  ###################################################### product ######################################################

  product-api:
    build: ./services/product-service/product-api
    container_name: product-api
    restart: always
    volumes:
      - ./services/product-service/product-api:/usr/share/nginx/html
    links:
      - "product-mysql:mysql-database"

  product-client:
    image: nginx:latest
    container_name: product-client
    restart: always
    volumes:
      - ./services/product-service/product-client/dist:/usr/share/nginx/html/product
      
  product-client-test:
    build: ./services/product-service/product-client-test-setting
    container_name: product-client-test
    restart: always
    volumes:
      - ./services/product-service/product-client:/usr/share/nginx/html/producttest
      - ./api-gateway/uploads:/usr/share/nginx/html/producttest/src/uploads

  product-mysql:
    image: mysql:5.7
    container_name: product-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${PRODUCT_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${PRODUCT_MYSQL_DATABASE:-}
      MYSQL_USER: ${PRODUCT_MYSQL_USER:-}
      MYSQL_PASSWORD: ${PRODUCT_MYSQL_PASSWORD:-}
    ports:
      - "4001:3306"
    volumes:
      - ./services/product-service/product-api/product-mysql_data:/var/lib/mysql

  #####################################################################################################################

  ###################################################### order ########################################################

  order-api:
    build: ./services/order-service/order-api
    container_name: order-api
    restart: always
    ports:
      - "3333:3333"
    volumes:
      - ./services/order-service/order-api:/usr/share/nginx/html
    links:
      - "order-mysql:mysql-database"
      - "warehouse-mysql:mysql-database2"
      - "anomaly-detection-mysql:mysql-database3"

  order-client:
    image: nginx:latest
    container_name: order-client
    restart: always
    volumes:
      - ./services/order-service/order-client/dist:/usr/share/nginx/html/order
      
  order-client-test:
    build: ./services/order-service/order-client-test-setting
    container_name: order-client-test
    restart: always
    volumes:
      - ./services/order-service/order-client:/usr/share/nginx/html/ordertest
      - ./api-gateway/uploads:/usr/share/nginx/html/ordertest/src/uploads

  order-mysql:
    image: mysql:5.7
    container_name: order-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${ORDER_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${ORDER_MYSQL_DATABASE:-}
      MYSQL_USER: ${ORDER_MYSQL_USER:-}
      MYSQL_PASSWORD: ${ORDER_MYSQL_PASSWORD:-}
    ports:
      - "4002:3306"
    volumes:
      - ./services/order-service/order-api/order-mysql_data:/var/lib/mysql

  #####################################################################################################################

  #################################################### warehouse ######################################################

  warehouse-api:
    build: ./services/warehouse-service/warehouse-api
    container_name: warehouse-api
    restart: always
    volumes:
      - ./services/warehouse-service/warehouse-api:/usr/share/nginx/html
    links:
      - "warehouse-mysql:mysql-database"

  warehouse-client:
    image: nginx:latest
    container_name: warehouse-client
    restart: always
    volumes:
      - ./services/warehouse-service/warehouse-client/dist:/usr/share/nginx/html/warehouse
      
  warehouse-client-test:
    build: ./services/warehouse-service/warehouse-client-test-setting
    container_name: warehouse-client-test
    restart: always
    volumes:
      - ./services/warehouse-service/warehouse-client:/usr/share/nginx/html/warehousetest

  warehouse-mysql:
    image: mysql:5.7
    container_name: warehouse-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${WAREHOUSE_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${WAREHOUSE_MYSQL_DATABASE:-}
      MYSQL_USER: ${WAREHOUSE_MYSQL_USER:-}
      MYSQL_PASSWORD: ${WAREHOUSE_MYSQL_PASSWORD:-}
    ports:
      - "4003:3306"
    volumes:
      - ./services/warehouse-service/warehouse-api/warehouse-mysql_data:/var/lib/mysql

  #####################################################################################################################

  ###################################################### master #######################################################

  master-api:
    build: ./services/master-service/master-api
    container_name: master-api
    restart: always
    ports:
      - "3334:3334"
    volumes:
      - ./services/master-service/master-api:/usr/share/nginx/html
    links:
      - "master-mysql:mysql-database"

  master-client:
    image: nginx:latest
    container_name: master-client
    restart: always
    volumes:
      - ./services/master-service/master-client/dist:/usr/share/nginx/html/master
      
  master-client-test:
    build: ./services/master-service/master-client-test-setting
    container_name: master-client-test
    restart: always
    volumes:
      - ./services/master-service/master-client:/usr/share/nginx/html/mastertest

  master-mysql:
    image: mysql:5.7
    container_name: master-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MASTER_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${MASTER_MYSQL_DATABASE:-}
      MYSQL_USER: ${MASTER_MYSQL_USER:-}
      MYSQL_PASSWORD: ${MASTER_MYSQL_PASSWORD:-}
    ports:
      - "4004:3306"
    volumes:
      - ./services/master-service/master-api/master-mysql_data:/var/lib/mysql

  #####################################################################################################################
  
  ################################################# anomaly detection #################################################

  anomaly-detection:
    build: ./anomaly-detection
    container_name: anomaly-detection
    restart: always
    ports:
      - "3335:3335"
    volumes:
      - ./anomaly-detection:/usr/share/nginx/html
    links:
      - "anomaly-detection-mysql:mysql-database"

  anomaly-detection-mysql:
    image: mysql:5.7
    container_name: anomaly-detection-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${ANOMALY_DETECTION_MYSQL_ROOT_PASSWORD:-}
      MYSQL_DATABASE: ${ANOMALY_DETECTION_MYSQL_DATABASE:-}
      MYSQL_USER: ${ANOMALY_DETECTION_MYSQL_USER:-}
      MYSQL_PASSWORD: ${ANOMALY_DETECTION_MYSQL_PASSWORD:-}
    ports:
      - "4005:3306"
    volumes:
      - ./anomaly-detection/anomaly-detection-mysql_data:/var/lib/mysql

  #####################################################################################################################

  ###################################################### certbot ######################################################
  
  certbot:
    depends_on:
      - nginxproxy
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot-etc:/etc/letsencrypt
      - ./api-gateway:/usr/share/nginx/html
    command: certonly --webroot --webroot-path=/usr/share/nginx/html --email tjalsrhks28@naver.com --agree-tos --no-eff-email --keep-until-expiring -d seomingwan.store -d www.seomingwan.store --force-renewal
  
  #####################################################################################################################

  ######################################################## ELK ########################################################

  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - elk
    restart: unless-stopped

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped
  
  filebeat:
    build:
      context: ./filebeat
    container_name: filebeat
    volumes:
      - ./api-gateway/logs/info:/var/log/server/api-gateway
      - ./services/product-service/product-api/logs/info:/var/log/server/product-api
      - ./services/order-service/order-api/logs/info:/var/log/server/order-api
      - ./anomaly-detection/logs/info:/var/log/server/anomaly-detection
    networks:
      - elk
    depends_on:
      - logstash

  #####################################################################################################################

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
